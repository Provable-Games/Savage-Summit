
// Generated by dojo-bindgen on Fri, 23 Aug 2024 17:23:53 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript` 
import { DojoProvider } from "@dojoengine/core";
import { Account } from "starknet";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export async function setupWorld(provider: DojoProvider) {
    // System definitions for `beast_of_the_hill-game_systems` contract
    function game_systems() {
        const contract_name = "game_systems";

        
        // Call the `attack` system with the specified Account and calldata
        const attack = async (props: { account: Account, beast_id: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "attack",
                        calldata: [props.beast_id],
                    },
                    "beast_of_the_hill"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `potion` system with the specified Account and calldata
        const potion = async (props: { account: Account, beast_id: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "potion",
                        calldata: [props.beast_id],
                    },
                    "beast_of_the_hill"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "beast_of_the_hill"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

        return {
            attack, potion, world
        };
    }

    return {
        game_systems: game_systems()
    };
}
